from .. import loader, utils
import time
import asyncio
import random
from datetime import datetime, timedelta
from telethon.tl.types import Message

@loader.tds
class AfkChatGPTMod(loader.Module):
    """AFK —Ä–µ–∂–∏–º —Å –æ—Ç–≤–µ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–æ—Ç–≤–µ—á–∏–∫–∞"""
    strings = {
        "name": "@YMEPOTBAC –ê–§–ö —Ä–µ–∂–∏–º—ã",
        "afk_on": "üü¢ <b>AFK —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω</b>\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
        "afk_off": "üî¥ <b>AFK —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω</b>\n–ë—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: {time}",
        "afk_response": "ü§ñ <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ (AFK —Ä–µ–∂–∏–º)</b>\n{response}\n\n<i>–í–µ—Ä–Ω—É—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ {return_time}</i>",
        "default_reason": "–ó–∞–Ω—è—Ç, –Ω–µ–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å"
    }

    def __init__(self):
        self.afk = False
        self.start_time = None
        self.reason = ""
        self.gpt_cache = {}

    async def client_ready(self, client, db):
        self.client = client

    async def afkcmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å AFK —Ä–µ–∂–∏–º"""
        if self.afk:
            # –í—ã–∫–ª—é—á–∞–µ–º AFK —Ä–µ–∂–∏–º
            afk_time = str(datetime.now() - self.start_time).split('.')[0]
            await utils.answer(message, self.strings["afk_off"].format(time=afk_time))
            self.afk = False
        else:
            # –í–∫–ª—é—á–∞–µ–º AFK —Ä–µ–∂–∏–º
            args = utils.get_args_raw(message)
            self.reason = args if args else self.strings["default_reason"]
            self.start_time = datetime.now()
            self.afk = True
            await utils.answer(message, self.strings["afk_on"].format(reason=self.reason))

    async def watcher(self, message):
        if not self.afk:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏—Å—Ö–æ–¥—è—â–µ–µ –∏ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º
        if not getattr(message, "out", False) and isinstance(message, Message) and getattr(message, "raw_text", ""):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = message.raw_text
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ ChatGPT (–∏–º–∏—Ç–∞—Ü–∏—è)
            if text in self.gpt_cache:
                response = self.gpt_cache[text]
            else:
                response = await self.generate_gpt_response(text)
                self.gpt_cache[text] = response

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è
            return_time = (self.start_time + timedelta(hours=2)).strftime("%H:%M")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await utils.answer(
                message,
                self.strings["afk_response"].format(
                    response=response,
                    return_time=return_time
                )
            )

    async def generate_gpt_response(self, text):
        """–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
        responses = [
            "–Ø —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –ø–æ–∑–∂–µ –æ—Ç–≤–µ—á—É!",
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            "–ó–∞–Ω—è—Ç, –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ —á–∞—Å.",
            "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞.",
            "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
            "–Ø –≤ –ê–§–ö —Ä–µ–∂–∏–º–µ. –û–∂–∏–¥–∞–π—Ç–µ",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –û—Ç–≤–µ—á—É –ø–æ–∑–∂–µ.",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç: —è –≤–∞—Å —É—Å–ª—ã—à–∞–ª, –æ—Ç–≤–µ—á—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!",
            "–°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç—É –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∑–∂–µ."
        ]
        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
        return random.choice(responses)