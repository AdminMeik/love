from .. import loader, utils
import time
import asyncio
import random
from datetime import datetime, timedelta
from telethon.tl.types import Message

@loader.tds
class AfkChatGPTMod(loader.Module):
    """AFK —Ä–µ–∂–∏–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    strings = {
        "name": "@YMEPOTBAC –ê–§–ö —Ä–µ–∂–∏–º—ã",
        "afk_on": "üü¢ <b>AFK —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω</b>\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–í–µ—Ä–Ω—É—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ –≤: {return_time}",
        "afk_off": "üî¥ <b>AFK —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω</b>\n–ë—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: {time}",
        "afk_response": "<b>{response}</b>\n\n–í–µ—Ä–Ω—É—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ {return_time}",
        "default_reason": "–∏—Å–ø–æ–ª—å–∑—É—é –∞–≤—Ç–æ–æ—Ç–≤–µ—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤",
        "afk_time_error": "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>.afk (–ø—Ä–∏—á–∏–Ω–∞) (–≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä 18:30)</code>",
        "afksms_set": "‚úÖ <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n<code>{response}</code>",
        "afksms_reset": "‚úÖ <b>–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</b>"
    }

    def __init__(self):
        self.afk = False
        self.start_time = None
        self.reason = ""
        self.return_time = None
        self.custom_response = None
        self.gpt_cache = {}

    async def client_ready(self, client, db):
        self.client = client

    async def afkcmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å AFK —Å –ø—Ä–∏—á–∏–Ω–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤–æ–∑–≤—Ä–∞—Ç–∞ | .afk (–ø—Ä–∏—á–∏–Ω–∞) (–≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä 18:30)"""
        args = utils.get_args_raw(message)
        
        if self.afk:
            # –í—ã–∫–ª—é—á–∞–µ–º AFK —Ä–µ–∂–∏–º
            afk_duration = str(datetime.now() - self.start_time).split('.')[0]
            await utils.answer(message, self.strings["afk_off"].format(time=afk_duration))
            self.afk = False
            return
        
        # –í–∫–ª—é—á–∞–µ–º AFK —Ä–µ–∂–∏–º
        if not args:
            self.reason = self.strings["default_reason"]
            self.return_time = (datetime.now() + timedelta(hours=2)).strftime("%H:%M")
        else:
            # –ü–∞—Ä—Å–∏–º –ø—Ä–∏—á–∏–Ω—É –∏ –≤—Ä–µ–º—è
            parts = args.split(maxsplit=1)
            if len(parts) == 1:
                self.reason = parts[0]
                self.return_time = (datetime.now() + timedelta(hours=2)).strftime("%H:%M")
            else:
                reason_part, time_part = parts
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
                    if ":" in time_part:
                        hours, minutes = map(int, time_part.split(":"))
                        if hours < 0 or hours > 23 or minutes < 0 or minutes > 59:
                            raise ValueError
                        now = datetime.now()
                        return_time = now.replace(hour=hours, minute=minutes, second=0)
                        if return_time < now:
                            return_time += timedelta(days=1)  # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                        self.return_time = return_time.strftime("%H:%M")
                        self.reason = reason_part
                    else:
                        self.reason = args
                        self.return_time = (datetime.now() + timedelta(hours=2)).strftime("%H:%M")
                except (ValueError, IndexError):
                    await utils.answer(message, self.strings["afk_time_error"])
                    return

        self.start_time = datetime.now()
        self.afk = True
        await utils.answer(
            message,
            self.strings["afk_on"].format(
                reason=self.reason,
                return_time=self.return_time
            )
        )

    async def afksmscmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è AFK | .afksms (—Ç–µ–∫—Å—Ç) –∏–ª–∏ .afksms –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞"""
        args = utils.get_args_raw(message)
        
        if not args:
            self.custom_response = None
            await utils.answer(message, self.strings["afksms_reset"])
        else:
            self.custom_response = args
            await utils.answer(message, self.strings["afksms_set"].format(response=args))

    async def watcher(self, message):
        if not self.afk:
            return

        if not getattr(message, "out", False) and isinstance(message, Message) and getattr(message, "raw_text", ""):
            text = message.raw_text
            
            if text in self.gpt_cache:
                response = self.gpt_cache[text]
            else:
                response = await self.generate_gpt_response(text)
                self.gpt_cache[text] = response

            await utils.answer(
                message,
                self.strings["afk_response"].format(
                    response=response,
                    return_time=self.return_time
                )
            )

    async def generate_gpt_response(self, text):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–ª–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–π)"""
        if self.custom_response:
            return self.custom_response
        
        responses = [
            "–Ø —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –ø–æ–∑–∂–µ –æ—Ç–≤–µ—á—É!",
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            "–ó–∞–Ω—è—Ç, –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ —á–∞—Å.",
            "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞.",
            "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
            "–Ø –≤ –ê–§–ö —Ä–µ–∂–∏–º–µ. –û–∂–∏–¥–∞–π—Ç–µ",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –û—Ç–≤–µ—á—É –ø–æ–∑–∂–µ.",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç: —è –≤–∞—Å —É—Å–ª—ã—à–∞–ª, –æ—Ç–≤–µ—á—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!",
            "–°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç—É –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∑–∂–µ."
        ]
        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
        return random.choice(responses)